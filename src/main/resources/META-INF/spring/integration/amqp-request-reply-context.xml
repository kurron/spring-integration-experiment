<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
             xmlns:rabbit="http://www.springframework.org/schema/rabbit"
             xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
                                 http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
                                 http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
                                 http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- messages sent to the messageChannel get queued routed to the baked-in stdout channel adapter (CharacterStreamWritingMessageHandler)-->

    <!--
    A Channel Adapter is a Message Endpoint that enables connecting a single sender or receiver to a Message Channel.
    An "inbound-channel-adapter" element can invoke any method on a Spring-managed Object and send a non-null return value
    to a MessageChannel after converting it to a Message.
    An "outbound-channel-adapter" element can also connect a MessageChannel to any POJO consumer method that should be
    invoked with the payload of Messages sent to that channel.
    -->

    <!-- The flow is console to channel to rabbit template to rabbit to rabbit consumer to console -->
    <logging-channel-adapter id="logger" level="DEBUG"/>
<!--
    <wire-tap pattern="*Rabbit" order="3" channel="logger"/>
-->
    <logging-channel-adapter id="loggingChannel" log-full-message="true" level="INFO" />

    <!-- From STDIN To RabbitMQ -->
    <int-stream:stdin-channel-adapter id="consoleIn" channel="toRabbit">
        <poller fixed-delay="1000" max-messages-per-poll="1" />
    </int-stream:stdin-channel-adapter>

    <int-stream:stdout-channel-adapter id="rabbitRepliesConsole" channel="rabbitReplies" append-newline="true" />

    <channel id="toRabbit" />
    <channel id="rabbitReplies">
        <interceptors>
            <wire-tap channel="loggingChannel" />
        </interceptors>
    </channel>

    <int-amqp:outbound-channel-adapter channel="toRabbit"
                                       amqp-template="amqpTemplate"
                                       exchange-name="si.test.exchange"
                                       routing-key="si.test.binding"
                                       return-channel="rabbitReplies"/>

    <!-- From RabbitMQ To STDOUT -->
    <int-amqp:inbound-channel-adapter channel="fromRabbit" queue-names="si.test.queue" connection-factory="connectionFactory" />

    <channel id="fromRabbit"/>

    <int-stream:stdout-channel-adapter id="consoleOut" channel="fromRabbit" append-newline="true" />

    <!-- Infrastructure -->
    <rabbit:connection-factory id="connectionFactory" publisher-returns="true" />

    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory" />

    <rabbit:admin connection-factory="connectionFactory" />

    <rabbit:queue name="si.test.queue" />

    <rabbit:direct-exchange name="si.test.exchange">
        <rabbit:bindings>
            <rabbit:binding queue="si.test.queue" key="si.test.binding" />
        </rabbit:bindings>
    </rabbit:direct-exchange>
</beans:beans>