<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:rabbit="http://www.springframework.org/schema/rabbit"
             xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
                                 http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
                                 http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- from automated publisher to request channel to gateway to RabbitMQ to reply channel back to publisher (blocking call) -->
    <channel id="toRabbit"/>
    <channel id="rabbitReply"/>
    <beans:bean id="automatedPublisher" class="org.kurron.hello.Publisher" lazy-init="false">
        <beans:constructor-arg>
            <gateway service-interface="org.kurron.hello.PublishingService" default-request-channel="toRabbit" default-reply-channel="rabbitReply">
                <method name="publishBytes">
                    <header name="logan" value="devan"/>
                </method>
            </gateway>
        </beans:constructor-arg>
    </beans:bean>
    <int-amqp:outbound-gateway id="outboundGateway"
                               request-channel="toRabbit"
                               exchange-name="si.test.exchange"
                               routing-key="si.test.binding"
                               reply-channel="rabbitReply"
                               mapped-request-headers="*"/>

    <!-- from RabbitMQ to channel to service -->
    <channel id="fromRabbit"/>
    <int-amqp:inbound-gateway id="inboundGateway"
                              request-channel="fromRabbit"
                              queue-names="si.test.queue"
                              connection-factory="connectionFactory"
                              error-handler="errorHandler"
                              concurrent-consumers="1"
                              mapped-request-headers="*"/>
    <service-activator id="pingServiceActivator"
                       input-channel="fromRabbit"
                       requires-reply="true">
        <beans:bean class="org.kurron.hello.ImageService"/>
    </service-activator>

    <!-- Infrastructure -->
    <beans:bean id="errorHandler" class="org.kurron.hello.SimpleErrorHandler"/>
    <rabbit:connection-factory id="connectionFactory"/>
<!--
    <message-history/>
-->

    <!-- This is a bit strange but you have to set your JSON message converter on the AMQP template that the outbound gateway uses or
         it won't properly set the message's content type correctly. Instead of application/json you get text/plain. I find this odd because
         you can set a message converter on the inbound gateway but not the outbound one.  Using a JSON transformer in the publishing
         flow does what we expect right up until publication to AMQP.  At that point, things get messed up and text/plain is used
         unless you set the converter on the AMQP template.  This might be ok if you always user JSON but what if you want to do
         both JSON and XML?  Do you need a separate template for each format?
    -->
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"/>
    <rabbit:admin connection-factory="connectionFactory" />
    <rabbit:queue name="si.test.queue" />
    <rabbit:direct-exchange name="si.test.exchange">
        <rabbit:bindings>
            <rabbit:binding queue="si.test.queue" key="si.test.binding" />
        </rabbit:bindings>
    </rabbit:direct-exchange>
</beans:beans>